
=============
 PSExec v2.2
=============
The PsExec utility was designed as part of the PsTools suite, originally developed by Mark Russinovich of Sysinternals, now owned by Microsoft. The tool is coined as a command line based remote administration tool and allows for the remote execution of processes on other systems. It is very flexible in that it will allow for the use of alternate authentication credentials rather than those of the user executing it, meaning you can manage devices separated by domain and site boundaries.

As of PSExec v2.1 (March 7, 2014), all network communications is encrypted. The command-line utility that enables you to execute programs on remote systems without preinstalling an agent, encrypts all communication between local and remote systems, including the transmission of command information such as the user name and password under which the remote program executes.

=================
 Enter-PSSession
=================
Start an interactive session with a remote computer. This allows running multiple commands. By default only administrators are permitted to remotely execute commands, so the session from which you launch Enter-PsSession must have administrator (or delegated admin) rights to the remote machine.

Regardless of the transport protocol used (HTTP or HTTPS), PowerShell Remoting always encrypts all communication after initial authentication with a per-session AES-256 symmetric key.

------------------------
 Initial authentication
------------------------
Authentication confirms the identity of the client to the server - and ideally - the server to the client.

When a client connects to a domain server using its computer name (i.e.: server01, or server01.contoso.com), the default authentication protocol is Kerberos. Kerberos guarantees both the user identity and server identity without sending any sort of reusable credential.

When a client connects to a domain server using its IP address, or connects to a workgroup server, Kerberos authentication is not possible. In that case, PowerShell Remoting relies on the NTLM authentication protocol. The NTLM authentication protocol guarantees the user identity without sending any sort of delegable credential. To prove user identity, the NTLM protocol requires that both the client and server compute a session key from the user's password without ever exchanging the password itself. The server typically does not know the user's password, so it communicates with the domain controller, which does know the user's password and calculates the session key for the server.

The NTLM protocol does not, however, guarantee server identity. As with all protocols that use NTLM for authentication, an attacker with access to a domain-joined computer's machine account could invoke the domain controller to compute an NTLM session-key and thereby impersonate the server.

NTLM-based authentication is disabled by default, but may be permitted by either configuring SSL on the target server, or by configuring the WinRM TrustedHosts setting on the client.

Using SSL certificates to validate server identity during NTLM-based connections
Since the NTLM authentication protocol cannot ensure the identity of the target server (only that it already knows your password), you can configure target servers to use SSL for PowerShell Remoting. Assigning a SSL certificate to the target server (if issued by a Certificate Authority that the client also trusts) enables NTLM-based authentication that guarantees both the user identity and server identity.

Ignoring NTLM-based server identity errors
If deploying a SSL certificate to a server for NTLM connections is infeasible, you may suppress the resulting identity errors by adding the server to the WinRM TrustedHosts list. Please note that adding a server name to the TrustedHosts list should not be considered as any form of statement of the trustworthiness of the hosts themselves - as the NTLM authentication protocol cannot guarantee that you are in fact connecting to the host you are intending to connect to. Instead, you should consider the TrustedHosts setting to be the list of hosts for which you wish to suppress the error generated by being unable to verify the server's identity.

-----------------------
 Ongoing Communication
-----------------------
Once initial authentication is complete, the PowerShell Remoting Protocol encrypts all ongoing communication with a per-session AES-256 symmetric key.
 - https://docs.microsoft.com/en-us/powershell/scripting/setup/winrmsecurity?view=powershell-3.0
