
# Compiles the individual commands into an object hashtable '$script:QueryCommands'
. "$Dependencies\Code\Execution\Compiled Script\Compile-QueryCommands.ps1"

$ProgressBarPanel.Controls.Add($ProgressBarEndpointsLabel)
$ProgressBarPanel.Controls.Add($script:ProgressBarEndpointsProgressBar)
$ProgressBarPanel.Controls.Remove($ProgressBarQueriesLabel)
$ProgressBarPanel.Controls.Remove($script:ProgressBarQueriesProgressBar)

if ($script:SectionQueryCount -gt 0) {
    # This brings specific tabs to the forefront/front view
    $MainLeftTabControl.SelectedTab = $Section1CollectionsTab
    $InformationTabControl.SelectedTab = $Section3ResultsTab

    [system.media.systemsounds]::Exclamation.play()
    [System.Windows.Forms.MessageBox]::Show("This mode does not currently support pushing:`nSysMon, AutoRuns, and ProcMon`n`nNor does it support the following sections:`nEventLogs, Registry, File Search, Network Connections","Compiled Script Error",[System.Windows.Forms.MessageBoxButtons]::OK)
}
else {
    Compile-QueryCommands

    # Prior to script execution, this launches a form to pre-view the script, allowing you to verify and edit its contents priot to being sent to endpoints
    $CommandReviewEditForm = New-Object System.Windows.Forms.Form -Property @{
        width         = $FormScale * 1025
        height        = $FormScale * 525
        StartPosition = "CenterScreen"
        Text          = "Collection Script - Review, Edit, and Verify"
        Icon          = [System.Drawing.Icon]::ExtractAssociatedIcon("$EasyWinIcon")
        ControlBox    = $true
        Font          = New-Object System.Drawing.Font("$Font",$($FormScale * 11),0,0,0)
        Add_Closing = { $This.dispose() }
    }

        $CommandReviewEditLabel = New-Object System.Windows.Forms.Label -Property @{
            Text      = "Edit The Script Block:"
            Location  = @{ X = $FormScale * 5
                            Y = $FormScale * 8 }
            Size      = @{ Height = $FormScale * 25
                            Width  = $FormScale * 160 }
            ForeColor = "Blue"
            Font      = New-Object System.Drawing.Font("$Font",$($FormScale * 14),0,0,0)
        }
        $CommandReviewEditForm.Controls.Add($CommandReviewEditLabel)


        $CommandReviewEditEnabledRadioButton = New-Object System.Windows.Forms.RadioButton -Property @{
            Text      = "Yes"
            Location  = @{ X = $FormScale * $CommandReviewEditLabel.Location.X + $CommandReviewEditLabel.Size.Width + 20
                            Y = $FormScale * 5 }
            Size      = @{ Height = $FormScale * 25
                            Width  = $FormScale * 50 }
            Checked   = $false
            Font      = New-Object System.Drawing.Font("$Font",$($FormScale * 11),0,0,0)
        }
        $CommandReviewEditEnabledRadioButton.Add_Click({
            $script:CommandReviewEditRichTextbox.BackColor = 'White'
            $script:CommandReviewEditRichTextbox.ReadOnly  = $False
        })
        $CommandReviewEditEnabledRadioButton.Add_MouseHover({
            Show-ToolTip -Title "Enable Script Editing" -Icon "Info" -Message @"
+  The script below is generated by the selections made.
+  Use caustion if editing, charts use the hashtable name field.
"@                  })
        $CommandReviewEditForm.Controls.Add($CommandReviewEditEnabledRadioButton)


        $CommandReviewEditDisabledRadioButton = New-Object System.Windows.Forms.RadioButton -Property @{
            Text     = "No"
            Location = @{ X = $FormScale * $CommandReviewEditEnabledRadioButton.Location.X + $CommandReviewEditEnabledRadioButton.Size.Width + 10
                            Y = $FormScale * 5 }
            Size     = @{ Height = $FormScale * 25
                            Width  = $FormScale * 50 }
            Checked  = $true
            Font     = New-Object System.Drawing.Font("$Font",$($FormScale * 11),0,0,0)
            Add_Click = {
                $script:CommandReviewEditRichTextbox.BackColor = 'LightGray'
                $script:CommandReviewEditRichTextbox.ReadOnly  = $True
            }
            Add_MouseHover = {
                Show-ToolTip -Title "Disable Script Editing" -Icon "Info" -Message @"
+  The script below is generated by the selections made.
+  Use caustion if editing, charts use the hashtable name field.
"@                      }
        }
        $CommandReviewEditForm.Controls.Add($CommandReviewEditDisabledRadioButton)


        $CommandReviewReloadNormalRawButton = New-Object System.Windows.Forms.Button -Property @{
            Text      = "Reload Script (Raw)"
            Location  = @{ X = $FormScale * $CommandReviewEditDisabledRadioButton.Location.X + $CommandReviewEditDisabledRadioButton.Size.Width + 25
                        Y = $FormScale * 7 }
            Size      = @{ Height = $FormScale * 22
                        Width  = $FormScale * 175 }
            Add_MouseHover = {
                Show-ToolTip -Title "Reload Script - Normal" -Icon "Info" -Message @"
+  When command treenode scripts are selected, they may load without return carriages depending on how they were created/formatted
+  To mitigate this, you can reload to get the scirpt's content normally or in a raw format
"@                      }
            Add_Click = {
                if ($CommandReviewReloadNormalRawButton.Text -eq "Reload Script (Raw)") {
                    Compile-QueryCommands -raw
                    $CommandReviewReloadNormalRawButton.Text = "Reload Script (Normal)"
                }
                else {
                    Compile-QueryCommands
                    $CommandReviewReloadNormalRawButton.Text = "Reload Script (Raw)"
                }
                Buffer-CommandReviewString
            }
        }
        Apply-CommonButtonSettings -Button $CommandReviewReloadNormalRawButton
        $CommandReviewEditForm.Controls.Add($CommandReviewReloadNormalRawButton)


        $CommandReviewScriptBlockByteCountTextbox = New-Object System.Windows.Forms.TextBox -Property @{
            Location  = @{ X = $FormScale * $CommandReviewReloadNormalRawButton.Location.X + $CommandReviewReloadNormalRawButton.Size.Width + 25
                            Y = $FormScale * 7 }
            Size      = @{ Height = $FormScale * 22
                            Width  = $FormScale * 100 }
        }
        $CommandReviewEditForm.Controls.Add($CommandReviewScriptBlockByteCountTextbox)


        $CommandReviewEditVerifyCheckbox = New-Object System.Windows.Forms.Checkbox -Property @{
            Text      = 'Verify'
            Font      = New-Object System.Drawing.Font("$Font",$($FormScale * 14),0,0,0)
            Location  = @{ X = $FormScale * 790
                        Y = $FormScale * 6 }
            Size      = @{ Height = $FormScale * 26
                        Width  = $FormScale * 75 }
            Checked   = $false
            Add_Click = {
                if ($CommandReviewEditVerifyCheckbox.checked){
                    $CommandReviewEditExecuteButton.Enabled   = $true
                    $CommandReviewEditExecuteButton.Text      = "Execute"
                    $CommandReviewEditExecuteButton.ForeColor = "Green"
                }
                else {
                    $CommandReviewEditExecuteButton.Enabled   = $false
                    $CommandReviewEditExecuteButton.Text      = "Cancel"
                    $CommandReviewEditExecuteButton.ForeColor = "Red"
                }
            }
        }

        $CommandReviewEditForm.Controls.Add($CommandReviewEditVerifyCheckbox)


        $CommandReviewEditExecuteButton = New-Object System.Windows.Forms.Button -Property @{
            Text      = "Cancel"
            Location  = @{ X = $FormScale * 879
                        Y = $FormScale * 5 }
            Size      = @{ Height = $FormScale * 25
                        Width  = $FormScale * 100 }
            Add_Click = {
                $script:CommandReviewEditRichTextbox.SaveFile("C:\Richtext_RTF.rtf")
                $CommandReviewEditForm.close()
            }
            Add_MouseHover = {
                Show-ToolTip -Title "Cancel or Execute" -Icon "Info" -Message @"
+  To Cancel, you need to uncheck the verify box.
+  To Execute, you first need to check the verify box.
+  First verify the contents of the script and edit if need be.
+  When executed, the compiled script is ran against each selected computer.
+  The results return as one object, then are locally extracted and saved individually.
+  The results for each section are saved individually by host and query.
+  The results are also compiled by query into a single file containing every host.
+  The code is executed within a PowerShel Job for each destination host.
+  The compiled commands reduce the amount of network traffic.
+  This method is faster, but requires more RAM on the target host.
+  Use caustion if editing, charts use the hashtable name field.
"@                      }
        }
        Apply-CommonButtonSettings -Button $CommandReviewEditExecuteButton
        $CommandReviewEditForm.Controls.Add($CommandReviewEditExecuteButton)


        $script:CommandReviewEditRichTextbox = New-Object System.Windows.Forms.RichTextBox -Property @{
            Location = @{ X = $FormScale * 5
                            Y = $FormScale * 35 }
            Size     = @{ Height = $FormScale * 422
                            Width  = $FormScale * 974 }
            Font       = New-Object System.Drawing.Font("Courier New",$($FormScale * 11),0,0,0)
            Multiline  = $True
            ScrollBars = 'Vertical'
            WordWrap   = $True
            ReadOnly   = $True
            BackColor  = 'LightGray' #LightSteelBlue
            ShortcutsEnabled = $true
            Add_KeyDown = {
                if ($_.KeyCode) { $CommandReviewScriptBlockByteCountTextbox.Text = "$([System.Text.Encoding]::UTF7.GetByteCount($($script:CommandReviewEditRichTextbox.Text))) bytes" }
            }
        }
        $CommandReviewEditForm.Controls.Add($script:CommandReviewEditRichTextbox)


        # This is the string that contains the command(s) to query, it is iterated over $targetcomputer
        function Buffer-CommandReviewString {

            if ($script:ComputerListProvideCredentialsCheckBox.Checked) {
                if (!$script:Credential) { Create-NewCredentials }
                Create-LogEntry -LogFile $LogFile -NoTargetComputer -Message "Credentials Used: $($script:Credential.UserName)"
            $script:CommandReviewString = @"
Invoke-Command -Credential `$script:Credential -ComputerName `$TargetComputer -ScriptBlock {
param(`$TargetComputer)
`$QueryResults = @{}


"@
            } # END if
            else {
                $script:CommandReviewString = @"
Invoke-Command -ComputerName `$TargetComputer -ScriptBlock {
param(`$TargetComputer)
`$QueryResults = @{}


"@
            } # END else
            $QueryCommandsCount = 0
            ForEach ($Query in $($script:QueryCommands.keys)) {
                $QueryCommandsCount++
                $script:CommandReviewString += @"
#===================================================================================================
# Query $($QueryCommandsCount): $($script:QueryCommands[$Query]['Name'])
#===================================================================================================

"@
                # if ($($script:QueryCommands[$Query]['Properties']) -eq $null) {
                    $script:CommandReviewString += @"
`$QueryResults += @{
'$($script:QueryCommands["$Query"]["Name"])' = @{
'Name'    = "$($script:QueryCommands[$Query]['Name']) -- `$TargetComputer"
'Results' = `$($($script:QueryCommands[$Query]['Command'])
)
}
}


"@
                #  } # END if
                <#   else {
                    $script:CommandReviewString += @"
`$QueryResults += @{
'$($script:QueryCommands["$Query"]["Name"])' = @{
'Name'    = "$($script:QueryCommands[$Query]['Name']) -- `$TargetComputer"
'Results' = `$($($script:QueryCommands[$Query]['Command']) | Select-Object -Property $($script:QueryCommands[$Query]['Properties'].replace('PSComputerName','@{Name="PSComputerName";Expression={$env:ComputerName}}'))
) # END 'Results'
} # END '$($script:QueryCommands["$Query"]["Name"])'
} # END `$QueryResults


"@
                } # END else #>
            } # END ForEach
            $script:CommandReviewString += @"
return `$QueryResults
} -ArgumentList @(`$TargetComputer)
"@
# This returns the results of all the queries as a single object with nested object data,
# which is then locally processed and separated into its individual result .CSVs files

            $script:CommandReviewEditRichTextbox.text = $script:CommandReviewString
            $CommandReviewScriptBlockByteCountTextbox.Text = "$([System.Text.Encoding]::UTF7.GetByteCount($script:CommandReviewString)) bytes"
        }
        Buffer-CommandReviewString

    $CommandReviewEditForm.ShowDialog() | Out-Null

    # Executes Compiled Script if the code is verified
    . "$Dependencies\Code\Execution\Compiled Script\Execute-CompiledScriptIfVerified.ps1"
}