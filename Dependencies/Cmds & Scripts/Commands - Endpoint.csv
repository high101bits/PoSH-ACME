Name,Type,Command_WinRM_PoSh,Command_SMB_PoSh,Command_RPC_Posh,Command_WinRM_WMI,Command_SMB_WMI,Command_RPC_WMI,Command_WinRM_Cmd,Command_SMB_Cmd,Command_RPC_Cmd,Command_WinRS_WMIC,Command_WinRS_CMD,Properties_PoSh,Properties_WMI,Description,ExportFileName,,
Accounts (Local Users),"User, Hunt, Charts",Invoke-Command -ScriptBlock { Get-LocalUser },Get-LocalUser,,"Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='True'"" }","Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='True'""","Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='True'""",Invoke-Command -ScriptBlock { & net user },net user,net user,winrs wmic useraccount where localaccount=true list brief,winrs net user,"PSComputerName, Name, Enabled, SID, LastLogon, AccountExpires, PasswordRequired, UserMayChangePassword, PasswordExpires, PasswordLastSet, PasswordChangeableDate, Description, FullName","PSComputerName, Name, Disabled, AccountType, Lockout, PasswordChangeable, PasswordRequired, SID, SIDType, LocalAccount, Domain, Caption, Description","Gets default built-in user accounts, local user accounts that were created, and local accounts that were connected to Microsoft accounts.",Accounts (Local Users),,
Accounts (Local Administrators),"User, Hunt",Invoke-Command -ScriptBlock { Get-LocalGroupMember -Group administrators },Get-LocalGroupMember -Group administrators,,,,,Invoke-Command -ScriptBlock { & net localgroup administrators },net localgroup administrators,net localgroup administrators,,winrs net localgroup administrators,"PSComputerName,Name, SID, ObjectClass, PrincipalSource","PSComputerName, *","Gets default built-in user accounts, local user accounts that were created, and local accounts that were connected to Microsoft accounts.

Investigate unauthorized administrator accounts. Utilize the best practice of 'least priviledge' and minimize the number of administrator accounts. Users should only use administrator accounts to when needed.",Accounts (Local Administrators),,
Anti Virus Product,System,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Namespace root\SecurityCenter2 -Class AntivirusProduct },Get-WmiObject -Namespace root\SecurityCenter2 -Class AntivirusProduct,Get-WmiObject -Namespace root\SecurityCenter2 -Class AntivirusProduct,,,,,,"PSComputerName, DisplayName, pathToSignedReportingExe","PSComputerName, DisplayName, pathToSignedReportingExe",Retrieves Antivirus Information,Anti Virus Product,,
ARP Cache,Network,Invoke-Command -ScriptBlock { Get-NetNeighbor },Get-NetNeighbor,,,,,Invoke-Command -ScriptBlock { & arp -a },arp -a,arp -a,,winrs arp -a,"PSComputerName, State, IPAddress, LinkLayerAddress, InterfaceAlias, InterfaceIndex","PSComputerName, State, IPAddress, LinkLayerAddress, PolicyStore","Gets IP addresses and link-layer addresses from ARP/neighbor cache entries.

Older versions of Windows used to have a timeout of 2 minutes for ARP entries. This has changed in Vista and Server 2008 onwards to comply with RFC 4861. The new implementation has lowered this time to a random value between 15 and 45 seconds.",ARP Cache,,
Audit Policy,Baseline,,,,,,,Invoke-Command -ScriptBlock { & auditpol /get /category:* /r | Convertfrom-Csv  },auditpol /get /category:* /r,auditpol /get /category:* /r,,winrs auditpol /get /category:*,"PSComputerName, *","PSComputerName, *","Gets the current audit policy for all subcategories: No Auditing, Success, Failure",Audit Policy,,
BIOS Info,Hardware,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_BIOS },Get-WmiObject -Class Win32_BIOS,Get-WmiObject -Class Win32_BIOS,,,,winrs wmic bios list brief,,"PSComputerName, *","PSComputerName, SMBIOSBIOSVersion, Name, Manufacturer, SerialNumber, Version, Description, @{Name=""ReleaseDate"";Expression={$_.ConvertToDatetime($_.ReleaseDate)}}, InstallDate",Gets the basic input/output services (BIOS) that are installed.,BIOS Info,,
Current Login Activity,"Account, Hunt",Invoke-Command -ScriptBlock { Get-WSManInstance -ResourceURI Shell -Enumerate },,,,,Get-WSManInstance -ResourceURI Shell -Enumerate,,,,,,"PSComputerName, *","PSComputerName, *",,Current Login Activity,,
Date Info,System,Invoke-Command -ScriptBlock { Get-Date },Get-Date,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_OperatingSystem },Get-WmiObject -Class Win32_OperatingSystem,Get-WmiObject -Class Win32_OperatingSystem,Invoke-Command -ScriptBlock { & date /t },date /t,date /t,,winrs date /t,"PSComputerName, DateTime","PSComputerName, @{n=""InstallDateFormatted"";e={$_.ConvertToDateTime($_.InstallDate)}},@{n=""LastBootupTimeFormatted"";e={$_.ConvertToDateTime($_.LastBootupTime)}},@{n=""LocalDateTimeFormatted"";e={$_.ConvertToDateTime($_.LocalDateTime)}},InstallDate, LastBootUpTime, LocalDateTime",Gets the current date and time.,Date Info,,
Disk - Logical Info,System,Invoke-Command -ScriptBlock { Get-PSDrive },Get-PSDrive,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_LogicalDisk },Get-WmiObject -Class Win32_LogicalDisk,Get-WmiObject -Class Win32_LogicalDisk,,,,winrs wmic LogicalDisk list brief,,"PSComputerName, Free, Used, Description, Provider, Root","PSComputerName, FreeSpace, Size, Description, ProviderName, DeviceID, @{name=""DriveType"";expression={ if ($_.DriveType -eq 2){""2: Removeable Disk""} elseif ($_.DriveType -eq 3){""3: Fixed Local Disk""} elseif ($_.DriveType -eq 4){""4: Network Disk""} elseif ($_.DriveType -eq 5){""5: Compact Disk""} else {""$($_.DriveType): Unknown""} }}, VolumeName",Gets logical disk/drive information.,Disk (Logical Info),,
Disk - Physical Info,Hardware,Invoke-Command -ScriptBlock { Get-Disk },Get-Disk,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_DiskDrive },Get-WmiObject -Class Win32_DiskDrive,Get-WmiObject -Class Win32_DiskDrive,,,,winrs wmic DiskDrive list brief,,"PSComputerName, Number, FriendlyName, Model, Manufacturer, SerialNumber, OperationalStatus, TotalSize, BootFromDisk, IsSystem, IsOfline, IsReadOnly, PartitionStyle, NumberOfPartitions, LargestFreeExtent, Location, UniqueId","PSComputerName, Status, Name, Caption, Description, Model, Manufacturer, SerialNumber, Signature, InterfaceType, MediaType, FirmwareRevision, SectorsPerTrack, Size, TotalCylinders, TotalHeads, TotalSectors, TotalTracks, TracksPerCylinder",Gets one or more disks visible to the operating system.,Disk (Physical Info),,
DNS Cache,Network,Invoke-Command -ScriptBlock { Get-DnsClientCache },Get-DnsClientCache,,,,,Invoke-Command -ScriptBlock { & ipconfig /displaydns },ipconfig /displaydns,ipconfig /displaydns,,winrs ipconfig /displaydns,"PSComputerName, Entry, RecordName, RecordType, Status, Section, TimeToLive, Data","PSComputerName, *","Retrieves the contents of the DNS client cache.

By default, Windows stores positive responses in the DNS cache for 86,400 seconds (ie, 1 day) and stores negative responses for 300 seconds (5 minutes).",DNS Cache,,
Drivers,System,Invoke-Command -ScriptBlock { Get-WindowsDriver -Online -All },Get-WindowsDriver -Online -All,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Systemdriver },Get-WmiObject -Class Win32_Systemdriver,Get-WmiObject -Class Win32_Systemdriver,Invoke-Command -ScriptBlock { & driverquery /si /FO CSV },driverquery /si /FO CSV,driverquery /si /FO CSV,,winrs driverquery /si,"PSComputerName, Online, ClassName, Driver, OriginalFileName, ClassDescription, BootCritical, DriverSignature, ProviderName, Date, Version, InBox, LogPath, LogLevel","PSComputerName, State, Status, Started, StartMode, Name, DisplayName, PathName, ExitCode, AcceptPause, AcceptStop, Caption, CreationClassName, Description, DesktopInteract, ErrorControl, InstallDate, ServiceType","Displays driver information in a Windows image.

Any unauthorized or unexpected drivers should be investigated.
",Drivers,,
Environmental Variables,System,Invoke-Command -ScriptBlock { Get-ChildItem Env: },Get-ChildItem Env:,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Environment },Get-WmiObject -Class Win32_Environment,Get-WmiObject -Class Win32_Environment,Invoke-Command -ScriptBlock { & set },set,set,winrs wmic environment list,winrs set,"PSComputerName, PSDrive, Name, Value","PSComputerName, UserName, Name, VariableValue",Gets the environmental variables.,Environmental Variables,,
EventLog Statistics (Basic),System,Invoke-Command -ScriptBlock { Get-EventLog -List },Get-EventLog -List,Get-EventLog -List,,,,,,,winrs wmic nteventlog list brief,,"PSComputerName, MaximumKilobytes, MinimumRetentionDays, OverflowAction, @{name=""Entries""; expression={($_.Entries).count}}, Log, EnableRaisingEvents","PSComputerName, *",Get Event Log statistics,EventLog Statistics (Basic),,
EventLog Statistics (Detailed),System,Invoke-Command -ScriptBlock { Get-WinEvent -ListLog * },Get-WinEvent -ListLog *,Get-WinEvent -ListLog *,,,,,,,,,"PSComputerName, IsEnabled, LogMode, MaximumSizeInBytes, RecordCount, LogName, LogType, LogIsolation, FileSize, IsLogFull, LastWriteTime, OldestRecordNumber","PSComputerName, *",Get a more granular breakdown of Event Log statistics,EventLog Statistics (Detailed),,
Failed Logins - 30 days,User,,,,,,,,,,,,"PSComputerName, SourceComputer, Username, IPAddress, Date","PSComputerName, *",Get failed logons from the last 30 days.,Failed Logins - 30 days,,
Firewall Port Proxy,,,,,,,,Invoke-Command -ScriptBlock { & netsh interface portproxy show all },netsh interface portproxy show all,netsh interface portproxy show all,,winrs netsh interface portproxy show all,"PSComputerName, *","PSComputerName, *",Gets the ports that are forwarded/redirected elsewhere.,Firewall Port Proxy,,
Firewall Rules,"Network, System",Invoke-Command -ScriptBlock { Get-NetFirewallRule },Get-NetFirewallRule,,,,,Invoke-Command -ScriptBlock { & netsh advfirewall firewall show rule name=all },netsh advfirewall firewall show rule name=all,netsh advfirewall firewall show rule name=all,,winrs netsh advfirewall firewall show rule name=all,"PSComputerName, Enabled, Name, DisplayName, Description, DisplayGroup, Group, Profile, Direction, Action, EdgeTraversalPolicy, LooseSourceMapping, LocalOnlyMapping, Owner, EnforcementStatus, Status, PrimaryStatus, PolicyStoreSource, PolicyStoreSourceType","PSComputerName, *",Retrieves the firewall rules on the endpoint.,Firewall Rules,,
Firewall Status,"Network, System",Invoke-Command -ScriptBlock { Get-NetFirewallProfile },Get-NetFirewallProfile,,,,,Invoke-Command -ScriptBlock { & netsh advfirewall show allprofiles state },netsh advfirewall show allprofiles state,netsh advfirewall show allprofiles state,,winrs netsh advfirewall show allprofiles state,"PSComputerName, Name, Enabled, DefaultInboundAction, DefaultOutboundAction, AllowInboundRules, AllowLocalFirewallRules, AllowLocalIPsecRules, AllowUserApps, AllowUserPorts, AllowUnicastResponseToMulticast, NotifyOnListen, EnableStealthModeForIPsec, LogFileName, LogMaxsizeKilobytes, LogAllowed, LogBlocked, LogIgnored, DisabledInterfaceAliases","PSComputerName, *",Displays settings that apply to the per-profile configurations of the Windows Firewall with Advanced Security,Firewall Status,,
Groups (Local),User,Invoke-Command -ScriptBlock { Get-LocalGroup },Get-LocalGroup,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Group -Filter { LocalAccount='True' }},Get-WmiObject -Class Win32_Group -Filter { LocalAccount='True' },Get-WmiObject -Class Win32_Group -Filter { LocalAccount='True' },Invoke-Command -ScriptBlock { & net localgroup },net localgroup,net localgroup,winrs wmic group list,winrs net localgroup,"PSComputerName, *","PSComputerName, Name, LocalAccount, Domain, SID, SIDType, Caption, Description",Gets the local security groups on the endpoint.,Groups (Local),,
Host Files,"File, Hunt",Invoke-Command -ScriptBlock { Get-Content C:\Windows\System32\drivers\etc\hosts },Get-Content C:\Windows\System32\drivers\etc\hosts,,,,,Invoke-Command -ScriptBlock { & type C:\Windows\System32\drivers\etc\hosts },type C:\Windows\System32\drivers\etc\hosts,type C:\Windows\System32\drivers\etc\hosts,,winrs type C:\Windows\System32\drivers\etc\hosts,"PSComputerName, *","PSComputerName, Directory, Name, Length, CreationTime, LastWriteTime, LastAccessTime, Attributes, Mode","Gets the contents of the Host file, which is a file that maps hostnames to IP addresses.",Host Files,,
Logical Drives Mapped,"Network, Hunt",Invoke-Command -ScriptBlock { Get-PSDrive },Get-PSDrive,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_LogicalDisk },Get-WmiObject -Class Win32_LogicalDisk,Get-WmiObject -Class Win32_LogicalDisk,Invoke-Command -ScriptBlock { & net use },net use,net use,winrs wmic LogicalDisk list brief,winrs net use,"PSComputerName, @{Name='Name';Expression={$_.DeviceID}}, DeviceID, DriveType, 
        @{Name     = 'DriveTypeName'
        Expression = {
            if     ($_.DriveType -eq 0) {'Unknown'}
            elseif ($_.DriveType -eq 1) {'No Root Directory'}
            elseif ($_.DriveType -eq 2) {'Removeable Disk'}
            elseif ($_.DriveType -eq 3) {'Local Drive'}
            elseif ($_.DriveType -eq 4) {'Network Drive'}
            elseif ($_.DriveType -eq 5) {'Compact Disc'}
            elseif ($_.DriveType -eq 6) {'RAM Disk'}
            else                        {'Error: Unknown'}        
        }}, VolumeName, 
    @{L='FreeSpaceGB';E={""{0:N2}"" -f ($_.FreeSpace /1GB)}},
    @{L=""CapacityGB"";E={""{0:N2}"" -f ($_.Size/1GB)}}","PSComputerName, @{Name='Name';Expression={$_.DeviceID}}, DeviceID, DriveType, 
        @{Name     = 'DriveTypeName'
        Expression = {
            if     ($_.DriveType -eq 0) {'Unknown'}
            elseif ($_.DriveType -eq 1) {'No Root Directory'}
            elseif ($_.DriveType -eq 2) {'Removeable Disk'}
            elseif ($_.DriveType -eq 3) {'Local Drive'}
            elseif ($_.DriveType -eq 4) {'Network Drive'}
            elseif ($_.DriveType -eq 5) {'Compact Disc'}
            elseif ($_.DriveType -eq 6) {'RAM Disk'}
            else                        {'Error: Unknown'}        
        }}, VolumeName, 
    @{L='FreeSpaceGB';E={""{0:N2}"" -f ($_.FreeSpace /1GB)}},
    @{L=""CapacityGB"";E={""{0:N2}"" -f ($_.Size/1GB)}}",Get the mapped network drives.,Logical Drives Mapped,,
Logon Info,"User, Hunt",,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_NetworkLoginProfile },Get-WmiObject -Class Win32_NetworkLoginProfile,Get-WmiObject -Class Win32_NetworkLoginProfile,Invoke-Command -ScriptBlock { & net config workstation | find /I ' name ' },net config workstation | find /I ' name ',net config workstation | find /I ' name ',winrs wmic netlogin list brief,winrs net config workstation | find /I ' name ',"PSComputerName, *","PSComputerName, Name, LastLogon, LastLogoff, NumberOfLogons, PasswordAge",Gets information about user logon activity.,Logon Info,,
Logon Sessions,"User, System",,,,,,,Invoke-Command -ScriptBlock { & query session },query session,query session,,winrs query session,"PSComputerName, *","PSComputerName, *",Gets session information of the computer.,Logon Sessions,,
Logon User Status,"User, Hunt",,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_LoggedOnUser },Get-WmiObject -Class Win32_LoggedOnUser,Get-WmiObject -Class Win32_LoggedOnUser,Invoke-Command -ScriptBlock { & query user },query user,query user,,winrs query user,"PSComputerName, *","PSComputerName, Antecedent, Dependent","Gets information about when a user logged on.

",Logon User Status,,
Memory (Capacity Info),Hardware,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_PhysicalMemoryArray },Get-WmiObject -Class Win32_PhysicalMemoryArray,Get-WmiObject -Class Win32_PhysicalMemoryArray,,,,,,"PSComputerName, *","PSComputerName, Model, Name, MaxCapacity, @{Name='MaxCapacityGigabyte';Expression={.MaxCapacity / 1Mb}}, MemoryDevices",Gets capacity information of the system memory.,Memory (Capacity Info),,
Memory (Performance Data),"Hardware, System",,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_PerfRawData_PerfOS_Memory },Get-WmiObject -Class Win32_PerfRawData_PerfOS_Memory,Get-WmiObject -Class Win32_PerfRawData_PerfOS_Memory,,,,,,"PSComputerName, *","PSComputerName, AvaiLabelBytes, AvaiLabelKBytes, AvaiLabelMBytes, CacheBytes, CacheBytesPeak, CacheFaultsPersec, Caption, CommitLimit, CommittedBytes, DemandZeroFaultsPersec, FreeAndZeroPageListBytes, FreeSystemPageTableEntries, Frequency_Object, Frequency_PerfTime, Frequency_Sys100NS, LongTermAverageStandbyCacheLifetimes, ModifiedPageListBytes, PageFaultsPersec, PageReadsPersec, PagesInputPersec, PagesOutputPersec, PagesPersec, PageWritesPersec, PercentCommittedBytesInUse, PercentCommittedBytesInUse_Base, PoolNonpagedAllocs, PoolNonpagedBytes, PoolPagedAllocs, PoolPagedBytes, PoolPagedResidentBytes, StandbyCacheCoreBytes, StandbyCacheNormalPriorityBytes, StandbyCacheReserveBytes, SystemCacheResidentBytes, SystemCodeResidentBytes, SystemCodeTotalBytes, SystemDriverResidentBytes, SystemDriverTotalBytes, Timestamp_Object, Timestamp_PerfTime, Timestamp_Sys100NS, TransitionFaultsPersec, TransitionPagesRePurposedPersec, WriteCopiesPersec",Gets performance data information of the system memory.,Memory (Performance Data),,
Memory (Physical Info),Hardware,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_PhysicalMemory },Get-WmiObject -Class Win32_PhysicalMemory,Get-WmiObject -Class Win32_PhysicalMemory,,,,,,"PSComputerName, *","PSComputerName, Tag, Capacity, Speed, Manufacturer, PartNumber, SerialNumber",Gets physical information of the system memory.,Memory (Physical Info),,
Memory (Utilization),System,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_OperatingSystem },Get-WmiObject -Class Win32_OperatingSystem,Get-WmiObject -Class Win32_OperatingSystem,,,,,,"PSComputerName, *","PSComputerName, FreePhysicalMemory,TotalVisibleMemorySize, FreeVirtualMemory, TotalVirtualMemorySize, @{Name=""FreePhysicalMemoryMegabyte"";Expression={$_.FreePhysicalMemory / 1KB}}, @{Name=""TotalVisibleMemorySizeMegabyte"";Expression={$_.TotalVisibleMemorySize / 1KB}}, @{Name=""FreeVirtualMemoryeMegabyte"";Expression={$_.FreeVirtualMemory / 1KB}}, @{Name=""TotalVirtualMemorySizeMegabyte"";Expression={$_.TotalVirtualMemorySize / 1KB}}",Gets utilization information of the system memory.,Memory (Utilization),,
Motherboard Info,Hardware,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_BaseBoard },Get-WmiObject -Class Win32_BaseBoard,Get-WmiObject -Class Win32_BaseBoard,,,,winrs wmic baseboard list brief,,"PSComputerName, *","PSComputerName, Manufacturer, Model, Name, SerialNumber, SKU, Product",Gets Motherboard information.,Motherboard Info,,
Network Connections TCP,"Network, Hunt",Invoke-Command -ScriptBlock { Get-NetTCPConnection },Get-NetTCPConnection,,,,,Invoke-Command -ScriptBlock { & netstat -anob -p tcp },netstat -anob -p tcp,netstat -anob -p tcp,,winrs netstat -anob -p tcp,"PSComputerName, State, LocalAddress, LocalPort, RemoteAddress, RemotePort, OwningProcess, CreationTime, OffloadState, AppliedSetting","PSComputerName, *",Gets TCP Network Connections,Network Connections TCP,,
Network Connections UDP,"Network, Hunt",Invoke-Command -ScriptBlock { Get-NetUDPEndpoint },Get-NetUDPEndpoint,,,,,Invoke-Command -ScriptBlock { & netstat -anob -p udp },netstat -anob -p udp,netstat -anob -p udp,,winrs netstat -anob -p udp,"PSComputerName, LocalAddress, LocalPort","PSComputerName, *",Gets UDP Network Connections,Network Connections UDP,,
Network Settings,"Network, Hunt, Charts, MAC Address, IP Address, Baseline",Invoke-Command -ScriptBlock { Get-NetIPAddress },Get-NetIPAddress,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_NetworkAdapterConfiguration },Get-WmiObject -Class Win32_NetworkAdapterConfiguration,Get-WmiObject -Class Win32_NetworkAdapterConfiguration,Invoke-Command -ScriptBlock { & ipconfig /all },ipconfig /all,ipconfig /all,winrs wmic nicconfig list brief,winrs ipconfig /all,"PSComputerName, IPAddress, InterfaceIndex, InterfaceAlias, AddressFamily, Type, PrefixLength, PrefixOrigin, SuffixOrigin, AddressState, ValidLifetime, PreferredLifetime, SkipAsSource, PolicyStore","PSComputerName, MACAddress, `
            @{Name=""IPAddress"";Expression={$_.IPAddress -join ""; ""}}, `
            @{Name=""IpSubnet"";Expression={$_.IpSubnet -join ""; ""}}, `
            @{Name=""DefaultIPGateway"";Expression={$_.DefaultIPgateway -join ""; ""}}, `
            Description, ServiceName, IPEnabled, DHCPEnabled, DNSHostname, `
            @{Name=""DNSDomainSuffixSearchOrder"";Expression={$_.DNSDomainSuffixSearchOrder -join ""; ""}}, `
            DNSEnabledForWINSResolution, DomainDNSRegistrationEnabled, FullDNSRegistrationEnabled, `
            @{Name=""DNSServerSearchOrder"";Expression={$_.DNSServerSearchOrder -join ""; ""}}, `
            @{Name=""WinsPrimaryServer"";Expression={$_.WinsPrimaryServer -join ""; ""}}, `
            @{Name=""WINSSecondaryServer"";Expression={$_.WINSSecondaryServer -join ""; ""}}",Gets network interface settings.,Network Settings,,
Network Statistics IPv4 All,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p ip },netstat -e -p ip,netstat -e -p ip,,,"PSComputerName, *","PSComputerName, *",Gets all host protocol statistics for an IPv4 network.,Network Statistics IPv4 All,,
Network Statistics IPv4 ICMP,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p icmp },netstat -e -p icmp,netstat -e -p icmp,,,"PSComputerName, *","PSComputerName, *",Gets host ICMP statistics for an IPv4 network.,Network Statistics IPv4 ICMP,,
Network Statistics IPv4 TCP,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p tcp },netstat -e -p tcp,netstat -e -p tcp,,,"PSComputerName, *","PSComputerName, *",Gets host TCP statistics for an IPv4 network.,Network Statistics IPv4 TCP,,
Network Statistics IPv4 UDP,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p udp },netstat -e -p udp,netstat -e -p udp,,,"PSComputerName, *","PSComputerName, *",Gets host UDP statistics for an IPv4 network.,Network Statistics IPv4 UDP,,
Network Statistics IPv6 All,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p ipv6 },netstat -e -p ipv6,netstat -e -p ipv6,,,"PSComputerName, *","PSComputerName, *",Gets all host protocol statistics for an IPv6 network.,Network Statistics IPv6 All,,
Network Statistics IPv6 TCP,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p tcpv6 },netstat -e -p tcpv6,netstat -e -p tcpv6,,,"PSComputerName, *","PSComputerName, *",Gets host TCP statistics for an IPv6 network.,Network Statistics IPv6 TCP,,
Network Statistics IPv6 UDP,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p udpv6 },netstat -e -p udpv6,netstat -e -p udpv6,,,"PSComputerName, *","PSComputerName, *",Gets host UDP statistics for an IPv6 network.,Network Statistics IPv6 UDP,,
Network Statistics IPv6 ICMP,Network,,,,,,,Invoke-Command -ScriptBlock { & netstat -e -p icmpv6 },netstat -e -p icmpv6,netstat -e -p icmpv6,,,"PSComputerName, *","PSComputerName, *",Gets host ICMP statistics for an IPv6 network.,Network Statistics IPv6 ICMP,,
Plug and Play Devices,Hardware,Invoke-Command -ScriptBlock { Get-PnpDevice },Get-PnpDevice,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_PnPEntity },Get-WmiObject -Class Win32_PnPEntity,Get-WmiObject -Class Win32_PnPEntity,,,,,,"PSComputerName, *","PSComputerName, InstallDate, Status, Description, Service, DeviceID, @{Name=""HardwareID"";Expression={$_.HardwareID -join ""; ""}}, Manufacturer",Gets information on Plug and Play (PnP) Devices,Plug and Play Devices,,
Prefetch Files,File,Invoke-Command -ScriptBlock { Get-ChildItem C:\Windows\Prefetch -Force },Get-ChildItem C:\Windows\Prefetch -Force,,,,,Invoke-Command -ScriptBlock { & dir C:\Windows\Prefetch },dir C:\Windows\Prefetch,dir C:\Windows\Prefetch,,winrs dir C:\Windows\Prefetch,"PSComputerName, Name, Directory, IsReadOnly, CreationTime, LastAccessTime, LastWriteTime, Mode, Attributes","PSComputerName, Directory, Name, Length, CreationTime, LastWriteTime, LastAccessTime, Attributes, Mode",Gets the Prefetch Files. Prefetch files are great artifacts for forensic investigators trying to analyze applications that have been run on a system. Windows creates a prefetch file when an application is run from a particular location for the very first time. This is used to help speed up the loading of applications,Prefetch Files,,
Printers Mapped,File,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Printer },Get-WmiObject -Class Win32_Printer,Get-WmiObject -Class Win32_Printer,,,,,,"PSComputerName, *","PSComputerName, Name, Status, Shared, Local, Network, SpoolEnabled, KeepPrintedJobs, DriverName, Default, Location",Gets printer information.,Printers Mapped,,
Processes,"System, Hunt, Charts, Baseline",Invoke-Command -ScriptBlock { Get-Process },Get-Process,Get-Process,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Process },Get-WmiObject -Class Win32_Process,Get-WmiObject -Class Win32_Process,Invoke-Command -ScriptBlock { & tasklist /V /FO CSV },tasklist /V /FO CSV,tasklist /V /FO CSV /s $TargetComputer,winrs wmic process list brief,winrs tasklist /V /FO CSV,"PSComputerName, ID, @{Name='ProcessID';Expression={$_.ID}},Path, StartTime, @{name=""WorkingSetSize"";expression={$_.WS}} , Handle, HandleCount, @{Name=""ThreadCount"";expression={($_.Threads).count}}, Company, Product, Description","PSComputerName, @{name=""Name"";expression={(($_.Name).split("".""))[0]}}, ProcessID, ParentProcessID, Path, WorkingSetSize, Handle, HandleCount, ThreadCount, @{n=""CreationDate"";e={$_.ConvertToDateTime($_.CreationDate)}}, Description","Gets a list of running processes.

A process is an instance of a computer program that is being executed by one or many threads that exeucte instructions concurrently. It contains the program code and its activity. The list of legitimate, non-malicious processes will largely depend on the operating system and software installed on the endpoiint.

Several techniques exists to determine if a process is malicious or not, for example:
     1) Malware often uses common executable names for obfuscation. In this case, you can check the file locaiton of the process. For example, the svchost.exe process should only be launched from the C:\Windows\System32 directory.
     2) Malware can use advance techniques like 'process hollowing', where a legitamate process is loaded on the system solely to act as a container for malicious code. In this case, you can use known established Windows internals for aide. For example, only services.exe can launch legit a svchost.exe process, so any svchost.exe with a differing parent process is malicious.
     3) Some processes should have only one instance running like services.exe and lsass.exe.",Processes,,
Processor (CPU Info),Hardware,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Processor },Get-WmiObject -Class Win32_Processor,Get-WmiObject -Class Win32_Processor,,,,,,"PSComputerName, *","PSComputerName, Name, Manufacturer, Caption, LoadPercentage, NumberOfCores, NumberOfLogicalProcessors, Description, MaxClockSpeed, CurrentClockSpeed, Status, ProcessorID, PartNumber",Gets information on the CPU Processor.,Processor (CPU Info),,
Restore Point Info,System,Invoke-Command -ScriptBlock { Get-ComputerRestorePoint },Get-ComputerRestorePoint,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Gets a list of Restore Points.,Restore Point Info,,
Scheduled Tasks,System,Invoke-Command -ScriptBlock { Get-ScheduledTask },Get-ScheduledTask,,,,,Invoke-Command -ScriptBlock { & schtasks /query /V /FO CSV },schtasks /query /V /FO CSV,schtasks /query /V /FO CSV,,winrs schtasks /query /V,"PSComputerName, TaskName, State, Date, Actions, TaskPath, Description","PSComputerName, *",Gets scheduled tasks.,Scheduled Tasks,,
Screen Saver Info,System,,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Desktop },Get-WmiObject -Class Win32_Desktop,Get-WmiObject -Class Win32_Desktop,,,,winrs wmic desktop list brief,,"PSComputerName, *","PSComputerName, Name, ScreenSaverActive, ScreenSaverTimeout, ScreenSaverExecutable, Wallpaper",Get screensaver information.,Screen Saver Info,,
Security Patches,"System, Charts, Baseline",Invoke-Command -ScriptBlock { Get-HotFix },Get-HotFix,Get-HotFix,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_QuickFixEngineering },Get-WmiObject -Class Win32_QuickFixEngineering,Get-WmiObject -Class Win32_QuickFixEngineering,Invoke-Command -ScriptBlock { & dism /online /get-packages },dism /online /get-packages,dism /online /get-packages,winrs wmic qfe list,winrs dism /online /get-packages,"PSComputerName, @{Name=""Name"";Expression={$_.HotFixID}}, HotFixID, Description, InstalledBy, @{Name='InstalledOn';Expression={$($_.InstalledOn).tostring(""yyyyMMdd"")}}, ServicePackInEffect","PSComputerName, @{Name=""Name"";Expression={$_.HotFixID}}, HotFixID, Description, InstalledBy, @{Name='InstalledOn';Expression={$($_.InstalledOn).tostring(""yyyyMMdd"")}}, ServicePackInEffect",Gets information on security patches and when they were installed.,Security Patches,,
Services,"System, Hunt, Charts, Baseline",Invoke-Command -ScriptBlock { Get-Service },Get-Service,Get-Service,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Service },Get-WmiObject -Class Win32_Service,Get-WmiObject -Class Win32_Service,Invoke-Command -ScriptBlock { & sc query state=all },sc query state=all,sc query state=all,winrs wmic service list brief,winrs sc query state=all,"PSComputerName, Status, Name, DisplayName, RequiredServices, StartType, CanPauseAndContinue, CanShutdown, CanStop, ServiceHandle","PSComputerName, State, Name, ProcessID, Description, PathName, Started, StartMode, StartName","Gets information on services.

A service is a program that is often automatically started upon boot or through some other means, and is generally used for programs that run in the background. One place to look for malware is in the operating system's services to see if there is a service that does not belong and could be loading the infection.

A service is loaded on startup by either 1) Windows directly launching an application or 2) by using svchost.exe.
     1) If a service is loaded directly by Windows, the associated filename that launches the service can be found in the ImagePath value under the following registry entry: HKLM\SYSTEM\CurrentControlSet\Services\<servicename>. 
     2) If a service is being launched by svchost.exe, it will be placed in a particular service group, which is then launched by svchost.exe. A listing of these groups and the services that are launched under them can be found under the following registry entry: HKLM\Software\Microsoft\Windows NT\CurrentVersion\Svchost. Under this key you will find various groups (netsvcs, LocalServices, etc) in which each contain multiple services that will be launched when the group is loaded by svchost.exe. These groups are loaded by the following command: svchost.exe -k netsvcs. It will load all the services found under the netsvcs group in the above key and appear as one process under the process list. So each time a new group is loaded by svchost.exe, you will find a new svchost.exe process listed in memory. It is for this reason why there are multiple svchost.exe processes listed on a machine. You can see what services each svchost.exe process is controlling with the following command: tasklist /SVC. When a service is launched in the way, the actual filename for the service can be found here: HKLM\SYSTEM\CurrentControlSet\Services\<servicename>\Parameters\\ServiceDLL. The value of Service DLL is the actual service file that we want to be concerned with.

Service entries are stored in the registry under a section called ControlSet. A ControlSet is located under the following registry key: HKLM\SYSTEM. A ControlSet is a complete copy of the configuration that is used to successfully launch services, other critical files, and drives for Windows. When you look under the above key there will always be at least two ControlSets and one CurrentControlSet. One of these numbered control sets refers to the default configuration that is used when the computer normally boots. The other numbered control set refers to the one used when you choose to boot up using the Last Known Good Configuration. The last one, CurrentControlSet, is an exact mirror of the ControlSet used to boot into Windows, so that if you make a change, CurrentControlSet will automatically appear in the ControlSet it is mirroring and vice-versa. If you want to know for sure which ControlSet the CurrentControlSet is pointing to you can examine the following registry key: HKLM\SYSTEM\Select. This key gives us important information as to which ControlSet was used on the last boot, which is used by default, and which is designated for LastKnownGoodConfiguration.
",Services,,
Services Hosted in each Process,System,,,,,,,Invoke-Command -ScriptBlock { & tasklist /SVC /FO CSV },tasklist /SVC /FO CSV,tasklist /SVC /FO CSV /s $TargetComputer,,winrs tasklist /SVC,"PSComputerName, *","PSComputerName, *",Displays with the services hosted in each process.,Services Hosted in each Process,,
SMB Connections,"Network, Hunt",Invoke-Command -ScriptBlock { Get-SmbConnection },Get-SmbConnection,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Retrieves the connections established from the SMB client to the SMB servers.,SMB Connections,,
SMB Share Access,Hunt,Invoke-Command -ScriptBlock { Get-SmbShare | Foreach-Object {Get-SmbShareAccess -Name $_.Name} },Get-SmbShare | Foreach-Object {Get-SmbShareAccess -Name $_.Name},,,,,,,,,,,,,,,
SMB Mapping,"Network, Hunt",Invoke-Command -ScriptBlock { Get-SmbMapping },Get-SmbMapping,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Retrieves the SMB client directory mappings created for a server.,SMB Mapping,,
SMB Open Files,"Network, Hunt",Invoke-Command -ScriptBlock { Get-SmbOpenFile },Get-SmbOpenFile,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Retrieves basic information about the files that are open on behalf of the clients of the SMB server.,SMB Open Files,,
SMB Sessions,"Network, Hunt",Invoke-Command -ScriptBlock { Get-SmbSession },Get-SmbSession,,,,,Invoke-Command -ScriptBlock { & net session },net session,net session,,winrs net session,"PSComputerName, *","PSComputerName, Status, Name, Path, Description","Retrieves information about the SMB sessions that are currently established between the SMB server and the associated clients.

Any unauthorized or unexpected SMB sessions should be investigated.",Sessions,,
SMB Shares,"Network, Hunt, Charts",Invoke-Command -ScriptBlock { Get-SmbShare },Get-SmbShare,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Share },Get-WmiObject -Class Win32_Share,Get-WmiObject -Class Win32_Share,Invoke-Command -ScriptBlock { & net share },net share,net share,winrs wmic share,winrs net share,"PSComputerName, *","PSComputerName, Status, Name, Path, Description","Gets network shares. The 'net share' command is used to manage file/printer shares.

Any unauthorized or unexpected shares should be investigated.",SMB Shares,,
Software Installed,"System, Hunt, Charts, Baseline",,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Product },Get-WmiObject -Class Win32_Product,Get-WmiObject -Class Win32_Product,,,,winrs wmic product list brief,,"PSComputerName, *","PSComputerName, Name, Vendor, Version, InstallDate, InstallDate2, InstallLocation, InstallSource, PackageName, PackageCache, RegOwner, HelpLink, HelpTelephone, URLInfoAbout, URLUpdateInfo, Language, Description, IdentifyingNumber",Gets installed software.,Software Installed,,
Startup Commands,"System, Hunt, Charts, Baseline",,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_StartupCommand },Get-WmiObject -Class Win32_StartupCommand,Get-WmiObject -Class Win32_StartupCommand,,,,winrs wmic startup list brief,,"PSComputerName, *","PSComputerName, Name, Location, Command, User",Gets startup information.,Startup Commands,,
System Info,"System, Network, Hardware, Baseline",Invoke-Command -ScriptBlock { Get-ComputerInfo },Get-ComputerInfo,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_ComputerSystem },Get-WmiObject -Class Win32_ComputerSystem,Get-WmiObject -Class Win32_ComputerSystem,Invoke-Command -ScriptBlock { & systeminfo /FO CSV | Convertfrom-Csv  },systeminfo /FO CSV,systeminfo /FO CSV,winrs wmic computersystem list brief,winrs systeminfo,"PSComputerName, *","PSComputerName, Description, Manufacturer, Model, SystemType, NumberOfProcessors, TotalPhysicalMemory, EnableDaylightSavingsTime, BootupState, PartOfDomain, Domain, Username, PrimaryOwnerName",GUI = msinfo32 , Get-ComputerInfo is only avilable on WPF 5.1 , Gets consolidated operating system information and properties.,System Info
UEFI Secure Boot Policy,Hardware,Invoke-Command -ScriptBlock { Get-SecureBootPolicy },Get-SecureBootPolicy,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Gets the publisher GUID and the policy version of the Secure Boot configuration policy.,UEFI Secure Boot Policy,,
UEFI Secure Boot Status,Hardware,Invoke-Command -ScriptBlock { Confirm-SecureBootUEFI },Confirm-SecureBootUEFI,,,,,,,,,,"PSComputerName, *","PSComputerName, *","If the hardware supports UEFI Secure Boot, checks if it's enabled. If enabled it will return True, otherwise False. If the hardware doesn't support UEFI Secure boot or is BIOS based, an not supported error will be displayed.",UEFI Secure Boot Status,,
USB Controller Devices,"Hardware, System",,,,Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_USBControllerDevice },Get-WmiObject -Class Win32_USBControllerDevice,Get-WmiObject -Class Win32_USBControllerDevice,,,,,,"PSComputerName, *","PSComputerName, Name, Manufacturer, Status, Service, DeviceID, @{Name=""HardwareID"";Expression={$_.HardwareID}}",Gets USB Device Controller Information.,USB Controller Devices,,
USB History,Hardware,Invoke-Command -ScriptBlock { Get-ItemProperty -Path HKLM:\system\CurrentControlSet\Enum\USBSTOR\*\* },Get-ItemProperty -Path HKLM:\system\CurrentControlSet\Enum\USBSTOR\*\*,,,,,,,,,,"PSComputerName, FriendlyName, Service, @{Name=""ContainerID"";Expression={""$($_.ContainerID.trim('{}'))""}}, @{Name=""HardwareID"";Expression={""$($_.HardwareID)""}} ","PSComputerName, *",Gets the USB History of devices previously connected.,USB History,,
VM List (Hyper-V),"System, VM",Invoke-Command -ScriptBlock { Get-VM -VMName * },Get-VM -VMName *,,,,,,,,,,"PSComputerName, VMName, VMId, State, Status, Uptime, CreationTime, SizeOfSystemFiles, CPUUsage, ProcessorCount, @{Name='NetworkAdapters';Expression@{$_.NetworkAdapters}}, @{Name='VMIntegrationService';Expression@{$_.VMIntegrationService}}, Heartbeat, IsClustered, ReplicationMode, ReplicationState, ReplicationHealth, MemoryAssigned, MemoryDemand, MemoryMinimum, MemoryMaximum, MemoryStartup, DynamicMemoryEnabled, SmartPagingFileInUse, SmartPagingFilePath, ResourceMeteringEnabled, ConfigurationLocation, SnapshotFileLocation, AutomaticStartAction, AutomaticStartDelay, NumaNodesCount, NumaSocketCount, Key, IsDeleted, Version, Notes, Generation, ParentSnapshotID, ParentSnapshotName, HardDrives, DVDDrives, FloppyDrive, FibreChannelHostBusAdapers, ComPort1, Comport2","PSComputerName, *",Gets the virtual machines from one or more Hyper-V hosts.,VM List (Hyper-V),,
VM Network Adapters (Hyper-V),"System, VM",Invoke-Command -ScriptBlock { Get-VMNetworkAdapter -VMName * },Get-VMNetworkAdapter -VMName *,,,,,,,,,,"PSComputerName, VMName, Name, Status, @{Name='IPAddresses';Expression={$_.IPAddresses}}, MacAddress, SwitchName, SwitchId IsManagementOs, ClusterMonitored, IsLegacy, IsExternalAdapter, DynamicMacAddressEnabled, MacAddressSpoofing, AclList, ExtendedAclList, IsolationSetting, CurrentIsolationMode, RoutingDomainList, DhcpGuard, RouterGuard, PortMirroringMode, IeeePriorityTag, VirtualSubnetId, VlanSetting, DynamicIPAddressLimit, StormLimit, AllowTeaming, VMQWeight, IpsecOffloadSAUsage, BandwidthSetting, BandwidthPercentage, StatusDescription, IsDeleted, ComputerName","PSComputerName, *","Gets the virtual network adapters of Hyper-V virtual machine, snapshot, management OS, or of a management OS.",VM Network Adapters (Hyper-V),,
VM Snapshots (Hyper-V),"System, VM",Invoke-Command -ScriptBlock { Get-VMSnapshot -VMName * },Get-VMSnapshot -VMName *,,,,,,,,,,"PSComputerName, VMName, State, Name, SnapshotType, CreationTime, ParentSnapshotName, VMId, Notes, Path","PSComputerName, *",Gets the checkpoints associated with a Hyper-V virtual machine or checkpoint.,VM Snapshots (Hyper-V),,
Windows Side by Side (Count),File,,,,,,,,,,,,"PSComputerName, *","PSComputerName, *","Windows Side By Side (WinSxS), is a folder that stores different copies of DLL and system files. It stores different files for compatibility reasons and for times older versions need to be restored. Files within contain different versions, are needed for installation, backups, or updates. It's a space hog, taking up several gigabytes of space and growing with each Windows Update you perform. ou can't just delete everything in the WinSxS folder, because some of those files are needed for Windows to run and update reliably. However, with Windows 7 and above you can use the built-in Disk Cleanup tool to delete older versions of Windows updates you no longer need.",Windows Side by Side (Count),,
Windows Defender (Malware History),Hunt,Invoke-Command -ScriptBlock { Get-MpThreat },Get-MpThreat,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Gets the history of threats detected on the computer.,Windows Defender (Malware History),,
Windows Defender (Malware Detected),System,Invoke-Command -ScriptBlock { Get-MpThreatDetection },Get-MpThreatDetection,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Gets active and past malware threats that Windows Defender detected.,Windows Defender (Malware Detected),,
Windows Defender (Preferences),"System, Network",Invoke-Command -ScriptBlock { Get-MpPreference },Get-MpPreference,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Gets preferences for the Windows Defender scans and updates.,Windows Defender (Preferences),,
Windows Defender (Status),"System, Network",Invoke-Command -ScriptBlock { Get-MpComputerStatus },Get-MpComputerStatus,,,,,,,,,,"PSComputerName, *","PSComputerName, *",Gets the status of anti-malware software on the computer.,Windows Defender (Status),,
WSMan Trusted Hosts,"System, Network",Invoke-Command -ScriptBlock { Get-Item WSMan:\localhost\Client\TrustedHosts },Get-Item WSMan:\localhost\Client\TrustedHosts,,,,,,,,,,"PSComputerName, *","PSComputerName, *","The WS-Management TrustedHosts list is a list of trusted resources for your computer. The TrustedHosts list consists of a comma-separated list of computer names, IP addresses, and fully-qualified domain names. Only members of the Administrators group on the computer have permission to change the list of trusted hosts on the computer. For information about runningWindows PowerShell with administrator permissions, see How to Run as Administrator. To use the IP address of a remote computer in a Windows PowerShell command to connect to the remote computer, the IP address must be in the TrustedHosts list on your computer. This is a requirement of NTLM authentication, which is used whenever a computer is identified by the IP address instead of a computer name.",WSMan Trusted Hosts,,
Windows Optional Features (Enabled),,Invoke-Command -ScriptBlock { Get-WindowsOptionalFeature -online | Where-Object state -eq enabled },Get-WindowsOptionalFeature -online | Where-Object {$_.state -eq 'enabled'},,,,,,,,,,"PSComputerName, FeatureName, State,  LogPath, LogLevel","PSComputerName, *","The Get-WindowsOptionalFeature cmdlet gets information about all features (operating system features that include
    optional Windows foundation features) in the Windows Foundation Package or a specified package in the Windows
    image.

    Use the PackageName or PackagePath parameter to get information about all features in a specific package in the
    Windows image.

    The FeatureName parameter gets more detailed information about a specific feature in the Windows image. If the
    feature is not a part of the Windows Foundation package, either a PackageName or PackagePath parameter must be
    used to specify the parent package of the feature.

    Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter
 to specify the location of a mounted Windows image.",Windows Optional Features (Enabled),,
