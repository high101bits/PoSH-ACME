Name,Type,Command_WinRM_PoSh,Command_WinRM_WMI,Command_WinRM_Cmd,Command_RPC_Posh,Command_RPC_WMI,Command_RPC_Cmd,Properties_PoSh,Properties_WMI,Command_WinRS_WMIC,Command_WinRS_CMD,Command_SMB_PoSh,Command_SMB_WMI,Command_SMB_Cmd,Command_Linux,Description,ExportFileName
AD Accounts (All Details and User Information),User,Invoke-Command -ScriptBlock { Get-ADUser -Filter * -Properties * },"Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='False'"" }",,,"Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='False'""",,"PSComputerName, Name, SID, Enabled, LockedOut, AccountLockoutTime, Created, @{n='WhenCreated';e={($_.created).tostring('yyyyMMdd')}}, Modified, @{n='WhenModified';e={($_.modified).tostring('yyyyMMdd')}}, AccountExpirationDate, LogonWorkStations, LastLogonDate, @{n='WhenLastLogonDate';e={($_.LastLogonDate).tostring('yyyyMMdd')}}, BadLogonCount, LastBadPasswordAttempt, @{n='WhenLastBadPasswordAttempt';e={($_.LastBadPasswordAttempt).tostring('yyyyMMdd')}}, PasswordLastSet, @{n='WhenPasswordLastSet';e={($_.PasswordLastSet).tostring('yyyyMMdd')}}, PasswordExpired, PasswordNeverExpires, PasswordNotRequired, CannotChangePassword, SamAccountName, UserPrincipalName, CanonicalName, DistinguishedName, MemberOf, SmartCardLogonRequired, ScriptPath, HomeDrive, Title, Organization, Office, POBox, StreetAddress, City, State, PostalCode, Fax, OfficePhone, HomePhone, MobilePhone, EmailAddress, ObjectClass, ObjectGUID, dSCorePropagationData,  @{n='LastdSCorePropagationData';e={$_.dSCorePropagationData[0].tostring('yyyyMMdd')}}","PSComputerName, *",winrs wmic useraccount,,Get-ADUser -Filter * -Properties *,"Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='False'""",,,Gets all the details and user information for Active Directory accounts.,AD Accounts (All Details and User Information)
AD Accounts (Dates),User,Invoke-Command -ScriptBlock { Get-ADUser -Filter * -Properties * },"Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='False'"" }",,,"Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='False'""",,"PSComputerName, Name, SID, Enabled, LockedOut, Created, @{n='WhenCreated';e={[string]($_.created).tostring('yyyyMMdd')}}, Modified, @{n='WhenModified';e={[string]($_.modified).tostring('yyyyMMdd')}}, LastLogonDate, @{n='WhenLastLogonDate';e={[string]($_.LastLogonDate).tostring('yyyyMMdd')}}, LastBadPasswordAttempt, @{n='WhenLastBadPasswordAttempt';e={[string]($_.LastBadPasswordAttempt).tostring('yyyyMMdd')}}, PasswordLastSet, @{n='WhenPasswordLastSet';e={[string]($_.PasswordLastSet).tostring('yyyyMMdd')}}, AccountExpirationDate, @{n='WhenAccountExpirationDate';e={[string]($_.AccountExpirationDate).tostring('yyyyMMdd')}}, dSCorePropagationData,  @{n='LastdSCorePropagationData';e={[string]$_.dSCorePropagationData[0].tostring('yyyyMMdd')}}","PSComputerName, *",winrs wmic useraccount,,Get-ADUser -Filter * -Properties *,"Get-WmiObject -Class Win32_UserAccount -Filter ""LocalAccount='False'""",,,Gets all the dates available for Active Directory accounts.,AD Accounts (Dates)
AD Accounts (Logon and Password Policy),User,Invoke-Command -ScriptBlock { Get-ADUser -Filter * -Properties * },,,,,,"PSComputerName, Name, Enabled, LockedOut, AccountLockoutTime, LogonWorkStations, LastLogonDate, LastBadPasswordAttempt, PasswordLastSet, PasswordExpired, PasswordNeverExpires, PasswordNotRequired, CannotChangePassword","PSComputerName, *",,,Get-ADUser -Filter * -Properties *,,,,Gets the logon and password policy for Active Directory accounts.,AD Accounts (Logon and Password Policy)
AD Accounts (Contact Information),User,Invoke-Command -ScriptBlock { Get-ADUser -Filter * -Properties * },,,,,,"PSComputerName, Name, Title, Organization, Office, POBox, StreetAddress, City, State, PostalCode, Fax, OfficePhone, HomePhone, MobilePhone, EmailAddress","PSComputerName, *",,,Get-ADUser -Filter * -Properties *,,,,Gets just the contact information for Active Directory accounts.,AD Accounts (Contact Information)
AD Accounts (Disabled),User,Invoke-Command -ScriptBlock { Search-ADAccount -AccountDisabled },,Invoke-Command -ScriptBlock { & dsquery user -disabled },,,dsquery user -disabled,"PSComputerName, Name, Enabled, LockedOut, LastLogonDate, AccountExpirationDate, PasswordExpired, PaswordNeverExpires, SID, SamAccountName, UserPrincipalName, DistinguishedName, ObjectClass, ObjectGUID","PSComputerName, *",,winrs dsquery user -disabled,Search-ADAccount -AccountDisabled,,dsquery user -disabled,,Gets Active Directory accounts that are disabled.,AD Accounts (Disabled)
AD Accounts (Expired),User,Invoke-Command -ScriptBlock { Search-ADAccount -AccountExpired },,,,,,"PSComputerName, Name, Enabled, LockedOut, LastLogonDate, AccountExpirationDate, PasswordExpired, PaswordNeverExpires, SID, SamAccountName, UserPrincipalName, DistinguishedName, ObjectClass, ObjectGUID","PSComputerName, *",,,Search-ADAccount -AccountExpired,,,,Gets Active Directory accounts that are expired.,AD Accounts (Expired)
AD Accounts (Inactive),User,Invoke-Command -ScriptBlock { Search-ADAccount -AccountInactive },,Invoke-Command -ScriptBlock { & dsquery user domainroot -inactive 4 },,,dsquery user domainroot -inactive 4,"PSComputerName, Name, Enabled, LockedOut, LastLogonDate, AccountExpirationDate, PasswordExpired, PaswordNeverExpires, SID, SamAccountName, UserPrincipalName, DistinguishedName, ObjectClass, ObjectGUID","PSComputerName, *",,winrs dsquery user domainroot -inactive 4,Search-ADAccount -AccountInactive,,dsquery user domainroot -inactive 4,,Gets Active Directory accounts that are inactive.,AD Accounts (Inactive)
AD Accounts (Locked Out),User,Invoke-Command -ScriptBlock { Search-ADAccount -LockedOut },,,,,,"PSComputerName, Name, Enabled, LockedOut, LastLogonDate, AccountExpirationDate, PasswordExpired, PaswordNeverExpires, SID, SamAccountName, UserPrincipalName, DistinguishedName, ObjectClass, ObjectGUID","PSComputerName, *",,,Search-ADAccount -LockedOut,,,,Gets Active Directory accounts that are locked out.,AD Accounts (Locked Out)
AD Accounts (Created Within 30 Days),User,Invoke-Command -ScriptBlock { $days = ((Get-Date).AddDays(-30)).Date ,Get-ADUser -Filter {whenCreated -ge $days} -Properties whenCreated,,$days = ((Get-Date).AddDays(-30)).Date ,,,,,,,Get-ADUser -Filter {whenCreated -ge $days} -Properties whenCreated },,,,"PSComputerName, Name, Enabled, LockedOut, LastLogonDate, AccountExpirationDate, PasswordExpired, PaswordNeverExpires, SID, SamAccountName, UserPrincipalName, DistinguishedName, ObjectClass, ObjectGUID","PSComputerName, *"
AD Accounts (Password Last Set),User,Invoke-Command -ScriptBlock { Get-ADUser -Filter * -Properties PasswordLastSet },,,,,,"PSComputerName, Name, PasswordLastSet, Enabled, SamAccountName, SID","PSComputerName, *",,,Get-ADUser -Filter * -Properties PasswordLastSet,,,,,AD Accounts (Password Last Set)
AD Accounts (Password Last Set Domain Admins),User,"Invoke-Command -ScriptBlock { Get-ADGroupMember -Identity ""Domain Admins"" | Get-ADUser -Properties PasswordLastSet }",,,,,,"PSComputerName, Name, PasswordLastSet, Enabled, SamAccountName, SID","PSComputerName, *",,,"Get-ADGroupMember -Identity ""Domain Admins"" | Get-ADUser -Properties PasswordLastSet",,,,,AD Accounts (Password Last Set Domain Admins)
AD Accounts (Password Never Expires),User,Invoke-Command -ScriptBlock { Search-ADAccount -PasswordNeverExpires },,,,,,"PSComputerName, Name, Enabled, LockedOut, LastLogonDate, AccountExpirationDate, PasswordExpired, PaswordNeverExpires, SID, SamAccountName, UserPrincipalName, DistinguishedName, ObjectClass, ObjectGUID","PSComputerName, *",,,Search-ADAccount -PasswordNeverExpires,,,,,AD Accounts (Password Never Expires)
AD Domain Object Changes Made (Last 1 Hour),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddHours(-1) ,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddHours(-1) ,,,,,,,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Changes Made (Last 8 Hours),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddHours(-8) ,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddHours(-8) ,,,,,,,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Changes Made (Last 1 Day),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddDays(-1) ,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddDays(-1) ,,,,,,,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Changes Made (Last 1 Week),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddDays(-7) ,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddDays(-7) ,,,,,,,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Changes Made (Last 1 Month),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddMonths(-1) ,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddMonths(-1) ,,,,,,,Get-ADObject -Filter 'whenChanged -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Creations (Last 1 Hour),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddHours(-1) ,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddHours(-1) ,,,,,,,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Creations (Last 8 Hours),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddHours(-8) ,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddHours(-8) ,,,,,,,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Creations (Last 1 Day),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddDays(-1) ,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddDays(-1) ,,,,,,,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Creations (Last 1 Week),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddDays(-7) ,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddDays(-7) ,,,,,,,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Object Creations (Last 1 Month),User,Invoke-Command -ScriptBlock { $StartDate = (Get-Date).AddMonths(-1) ,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated,,$StartDate = (Get-Date).AddMonths(-1) ,,,,,,,Get-ADObject -Filter 'WhenCreated -gt $StartDate' -IncludeDeletedObjects -properties * | Sort-Object WhenCreated },,,,"PSComputerName, Name, ObjectClass, WhenCreated, WhenChanged, Deleted, LastLogon, LogonCount, DistinguishedName, ObjectSID","PSComputerName, *"
AD Domain Information,Domain,Invoke-Command -ScriptBlock { Get-ADDomain },,,,,,"PSComputerName, *","PSComputerName, *",,,Get-ADDomain,,,,Gets Basic Active Directory Information,AD Domain Basic Information
AD Domain Controllers (All of them),Domain,,,Invoke-Command -ScriptBlock { & netdom query DC },,,netdom query DC,,"PSComputerName, *",,winrs netdom query DC,,,netdom query DC,,,AD Domain Controllers (All of them)
AD Domain Controllers (Primary),Domain,,,Invoke-Command -ScriptBlock { & netdom query PDC },,,netdom query PDC,,"PSComputerName, *",,winrs netdom query PDC,,,netdom query PDC,,,AD Domain Controllers (Primary)
AD Domain Controllers (That are Global Catalogs),Domain,,,Invoke-Command -ScriptBlock { & dsquery server | dsget server -dnsname -site -isgc },,,dsquery server | dsget server -dnsname -site -isgc,,"PSComputerName, *",,winrs dsquery server | dsget server -dnsname -site -isgc,,,dsquery server | dsget server -dnsname -site -isgc,,,AD Domain Controllers (That are Global Catalogs)
AD Domain Controllers (Read Only Domain Controllers [RODC]),Domain,,,Invoke-Command -ScriptBlock { & dsquery server -isreadonly },,,dsquery server -isreadonly,,"PSComputerName, *",,winrs dsquery server -isreadonly,,,dsquery server -isreadonly,,,AD Domain Controllers (Read Only Domain Controllers [RODC])
AD Domain FSMO Roles,Domain,,,Invoke-Command -ScriptBlock { & netdom query FSMO },,,netdom query FSMO,,"PSComputerName, *",,winrs netdom query FSMO,,,netdom query FSMO,,,AD Domain FSMO Roles
AD Domain FSMO (Schema Master in Forest),Domain,Invoke-Command -ScriptBlock { Get-ADForest },,Invoke-Command -ScriptBlock { & dsquery server -forest -hasfsmo Schema },,,dsquery server -forest -hasfsmo Schema,"PSComputerName, SchemaMaster","PSComputerName, *",,winrs dsquery server -forest -hasfsmo Schema,Get-ADForest,,dsquery server -forest -hasfsmo Schema,,,AD Domain FSMO (Schema Master in Forest)
AD Domain FSMO (Domain Naming Master),Domain,Invoke-Command -ScriptBlock { Get-ADForest },,Invoke-Command -ScriptBlock { & dsquery server -forest -hasfsmo Name },,,dsquery server -forest -hasfsmo Name,"PSComputerName, DomainNamingMaster","PSComputerName, *",,winrs dsquery server -forest -hasfsmo Name,Get-ADForest,,dsquery server -forest -hasfsmo Name,,,AD Domain FSMO (Domain Naming Master)
AD Domain FSMO (Primary Domain Controller),Domain,Invoke-Command -ScriptBlock { Get-ADDomain },,Invoke-Command -ScriptBlock { & dsquery server -hasfsmo PDC },,,dsquery server -hasfsmo PDC,"PSComputerName, PDCEmulator","PSComputerName, *",,winrs dsquery server -hasfsmo PDC,Get-ADDomain,,dsquery server -hasfsmo PDC,,,AD Domain FSMO (Primary Domain Controller)
AD Domain FSMO (RID Master),Domain,Invoke-Command -ScriptBlock { Get-ADDomain },,Invoke-Command -ScriptBlock { & dsquery server -hasfsmo RID },,,dsquery server -hasfsmo RID,"PSComputerName, RIDMaster","PSComputerName, *",,winrs dsquery server -hasfsmo RID,Get-ADDomain,,dsquery server -hasfsmo RID,,,AD Domain FSMO (RID Master)
AD Domain FSMO (Infrastructure Master),Domain,Invoke-Command -ScriptBlock { Get-ADDomain },,Invoke-Command -ScriptBlock { & dsquery server -hasfsmo INFR },,,dsquery server -hasfsmo INFR,"PSComputerName, InfrastructureMaster","PSComputerName, *",,winrs dsquery server -hasfsmo INFR,Get-ADDomain,,dsquery server -hasfsmo INFR,,,AD Domain FSMO (Infrastructure Master)
AD Domain Organizationation Units (OUs),Domain,,,Invoke-Command -ScriptBlock { & netdom query OU },,,netdom query OU,,"PSComputerName, *",,winrs netdom query OU,,,netdom query OU,,,AD Domain Organizationation Units (OUs)
AD Domain Servers (All of them),Domain,,,Invoke-Command -ScriptBlock { & netdom query server },,,netdom query server,,"PSComputerName, *",,winrs netdom query server,,,netdom query server,,Lists all domain joined servers.,AD Domain Servers (All of them)
AD Domain Sites,Domain,,,Invoke-Command -ScriptBlock { & dsquery site -name * -limit 0 },,,dsquery site -name * -limit 0,,"PSComputerName, *",,winrs dsquery site -name * -limit 0,,,dsquery site -name * -limit 0,,,AD Domain Sites
AD Domain Trusts,"Domain, Trust",Invoke-Command -ScriptBlock { Get-ADTrust -Filter * },Invoke-Command -ScriptBlock { Get-WmiObject -Class Microsoft_DomainTrustStatus -Namespace ROOT\MicrosoftActiveDirectory },Invoke-Command -ScriptBlock { & netdom query TRUST },,Get-WmiObject -Class Microsoft_DomainTrustStatus -Namespace ROOT\MicrosoftActiveDirectory,netdom query TRUST,"PSComputerName, TrustedDomain, TrustAttributes, TrustDirection, TrustType","PSComputername, TrustedDomain, TrustAttributes, TrustDirection, TrustType",,winrs netdom query TRUST,Invoke-Command -ScriptBlock { Get-ADTrust -Filter *,Get-WmiObject -Class Microsoft_DomainTrustStatus -Namespace ROOT\MicrosoftActiveDirectory,netdom query TRUST,,Gets all the trusted domain objects.,AD Domain Trusts
AD Domain Workstations (All of them),Domain,,,Invoke-Command -ScriptBlock { & netdom query workstation },,,netdom query workstation,,"PSComputerName, *",,winrs netdom query workstation,,,netdom query workstation,,Lists all domain joined workstations.,AD Domain Workstations (All of them)
AD Group (Primary Group is Domain Computers),Domain,,,"Invoke-Command -ScriptBlock { & dsquery * -filter ""(primaryGroupID=515)"" -limit 0 }",,,"dsquery * -filter ""(primaryGroupID=515)"" -limit 0",,"PSComputerName, *",,"winrs dsquery * -filter ""(primaryGroupID=515)"" -limit 0",,,"dsquery * -filter ""(primaryGroupID=515)"" -limit 0",,,AD Group (Primary Group is Domain Computers)
AD Group (Primary Group is Domain Controllers),Domain,,,"Invoke-Command -ScriptBlock { & dsquery * -filter ""(primaryGroupID=516)"" -limit 0 }",,,"dsquery * -filter ""(primaryGroupID=516)"" -limit 0",,"PSComputerName, *",,"winrs dsquery * -filter ""(primaryGroupID=516)"" -limit 0",,,"dsquery * -filter ""(primaryGroupID=516)"" -limit 0",,,AD Group (Primary Group is Domain Controllers)
AD Group (Primary Group is Domain Users),Domain,,,"Invoke-Command -ScriptBlock { & dsquery * -filter ""(primaryGroupID=513)"" -limit 0 }",,,"dsquery * -filter ""(primaryGroupID=513)"" -limit 0",,"PSComputerName, *",,"winrs dsquery * -filter ""(primaryGroupID=513)"" -limit 0",,,"dsquery * -filter ""(primaryGroupID=513)"" -limit 0",,,AD Group (Primary Group is Domain Users)
AD Group (Primary Group is Guests),Domain,,,"Invoke-Command -ScriptBlock { & dsquery * -filter ""(primaryGroupID=514)"" -limit 0 }",,,"dsquery * -filter ""(primaryGroupID=514)"" -limit 0",,"PSComputerName, *",,"winrs dsquery * -filter ""(primaryGroupID=514)"" -limit 0",,,"dsquery * -filter ""(primaryGroupID=514)"" -limit 0",,,AD Group (Primary Group is Guests)
AD Get All Object Classes,Domain,Invoke-Command -ScriptBlock { Get-AdObject -Filter * },,,,,,"PSComputerName, *","PSComputerName, *",,,Get-AdObject -Filter *,,,,,AD Get All Object Classes
AD Organizational Units,Domain,Invoke-Command -ScriptBlock { Get-ADOrganizationalUnit -Filter * },,,,,,"PSComputerName, *","PSComputerName, *",,,Get-ADOrganizationalUnit -Filter *,,,,,AD Organizational Units
AD Computers (All Details and OS Info),Computer,Invoke-Command -ScriptBlock { Get-ADComputer -Filter * -Properties * },,,,,,"PSComputerName, Enabled, Name, OperatingSystem, OperatingSystemServicePack, OperatingSystemHotfix, OperatingSystemVersion, IPv4Address, IPv6Address, LogonCount, LastLogonDate, Created, Modified, Location, ObjectClass, SID, SIDHistory, DistinguishedName, DNSHostName, SamAccountName, CannotChangePassword, PasswordLastSet","PSComputerName, *",,,Get-ADComputer -Filter * -Properties *,,,,,AD Computers (All Details and OS Info)
AD Computers (Dates),Computer,Invoke-Command -ScriptBlock { Get-ADComputer -Filter * -Properties * },,,,,,"PSComputerName, Name, SID, Enabled, LockedOut, Created, @{n='WhenCreated';e={[string]($_.created).tostring('yyyyMMdd')}}, Modified, @{n='WhenModified';e={[string]($_.modified).tostring('yyyyMMdd')}}, LastLogonDate, @{n='WhenLastLogonDate';e={[string]($_.LastLogonDate).tostring('yyyyMMdd')}}, LastBadPasswordAttempt, @{n='WhenLastBadPasswordAttempt';e={[string]($_.LastBadPasswordAttempt).tostring('yyyyMMdd')}}, PasswordLastSet, @{n='WhenPasswordLastSet';e={[string]($_.PasswordLastSet).tostring('yyyyMMdd')}}, AccountExpirationDate, @{n='WhenAccountExpirationDate';e={[string]($_.AccountExpirationDate).tostring('yyyyMMdd')}}, dSCorePropagationData,  @{n='LastdSCorePropagationData';e={[string]$_.dSCorePropagationData[0].tostring('yyyyMMdd')}}","PSComputerName, *",,,Get-ADComputer -Filter * -Properties *,,,,,AD Computers (Dates)
AD Password Policy (Default Domain),"User, Password",Invoke-Command -ScriptBlock { Get-ADDefaultDomainPasswordPolicy },,,,,,"PSComputerName, *","PSComputerName, *",,,Get-ADDefaultDomainPasswordPolicy,,,,,AD Password Policy (Default Domain)
AD Password Policy (Fine Grained),"User, Password",Invoke-Command -ScriptBlock { Get-ADFineGrainedPasswordPolicy -filter * },,,,,,"PSComputerName, *","PSComputerName, *",,,Get-ADFineGrainedPasswordPolicy -filter *,,,,,AD Password Policy (Fine Grained)
AD Groups,User,Invoke-Command -ScriptBlock { Get-ADGroup -Filter * -Properties *},"Invoke-Command -ScriptBlock { Get-WmiObject -Class Win32_Group -Filter ""LocalAccount='False'"" }",,,"Get-WmiObject -Class Win32_Group -Filter ""LocalAccount='False'""",,"PSComputerName, Name, SID, SIDHistory, GroupCategory, GroupScope, @{n=""Member""; e={($_.Members -replace ""CN="",""`nCN="") }}, Members, MemberOf, WhenCreated, WhenChanged, DistinguishedName, Description, ProtectedFromAccidentalDeletion","PSComputerName, Name, Domain, SID, SIDType, Caption, Description",,,Get-ADGroup -Filter * -Properties *,"Get-WmiObject -Class Win32_Group -Filter ""LocalAccount='False'""",,,,AD Groups
AD Group Membership by Groups,User,,,,,,,,"PSComputerName, *",,,,,,,,AD Group Membership by Groups
AD Group Membership by Users,User,,,,,,,,"PSComputerName, *",,,,,,,,AD Group Membership by Users
AD Groups Without Account Members,User,Invoke-Command -ScriptBlock { Get-ADGroup -filter * | Where-Object {-Not ($_ | Get-ADGroupMember)} },,,,,,"PSComputerName, Name, ObjectClass, DistinguishedName, GroupCategory, GroupScope, ObjectGUID, SamAccountName, SID","PSComputerName, *",,,Get-ADGroup -filter * | Where-Object {-Not ($_ | Get-ADGroupMember)},,,,,AD Groups Without Account Members
AD DNS All Records (Server 2008),Network,,Invoke-Command -ScriptBlock { Get-WmiObject -Namespace root\MicrosoftDNS -class microsoftdns_resourcerecord },,,Get-WmiObject -Namespace root\MicrosoftDNS -class microsoftdns_resourcerecord,,"PSComputerName, *","PSComputerName, __Class, ContainerName, DomainName, RecordData, OwnerName",,,,Get-WmiObject -Namespace root\MicrosoftDNS -class microsoftdns_resourcerecord,,,,AD DNS All Records (Server 2008)
AD DNS Root Hints (Server 2008),Network,,Invoke-Command -ScriptBlock { Get-WmiObject -Namespace root\MicrosoftDNS -class microsoftdns_resourcerecord | Where-Object {$_.domainname -eq '..roothints'} },,,Get-WmiObject -Namespace root\MicrosoftDNS -class microsoftdns_resourcerecord | Where-Object {$_.domainname -eq '..roothints'},,"PSComputerName, *","PSComputerName, *",,,,Get-WmiObject -Namespace root\MicrosoftDNS -class microsoftdns_resourcerecord | Where-Object {$_.domainname -eq '..roothints'},,,,AD DNS Root Hints (Server 2008)
AD DNS Zones (Server 2008),Network,,Invoke-Command -ScriptBlock { Get-WmiObject -Namespace 'root\MicrosoftDNS' -Class MicrosoftDNS_Zone },,,Get-WmiObject -Namespace 'root\MicrosoftDNS' -Class MicrosoftDNS_Zone,,,"PSComputerName, *",,,,Get-WmiObject -Namespace 'root\MicrosoftDNS' -Class MicrosoftDNS_Zone,,,"PSComputerName, Name",AD DNS Zones (Server 2008)
AD DNS Statistics (Server 2008),Network,,Invoke-Command -ScriptBlock { Get-WmiObject -Namespace root\MicrosoftDNS -Class MicrosoftDNS_Statistic },,,Get-WmiObject -Namespace root\MicrosoftDNS -Class MicrosoftDNS_Statistic,,"PSComputerName, *","PSComputerName, Name, Value",,,,Get-WmiObject -Namespace root\MicrosoftDNS -Class MicrosoftDNS_Statistic,,,,AD DNS Statistics (Server 2008)
AD DNS Server Statistics (Time),Network,Invoke-Command -ScriptBlock { Get-DnsServerStatistics | Select -ExpandProperty TimeStatistics },,,,,,"PSComputerName, LastClearTime, ServerStartTime, TimeElapsedSinceLastClearedStatistics, TimeElapsedSinceLastClearedStatisticsBetweenRestart, TimeElapsedSinceServerStart, TimeElapsedSinceServerStartBetweenRestart",,,,Get-DnsServerStatistics | Select -ExpandProperty TimeStatistics,,,,,AD DNS Server Statistics (Time)
AD DNS Server Statistics (Query 1),Network,Invoke-Command -ScriptBlock { Get-DnsServerStatistics | Select -ExpandProperty QueryStatistics },,,,,,"PSComputerName, TcpClientConnections, TcpQueries, TcpQueriesSent, TcpResponses, TcpResponsesReceived, UdpQueries, UdpQueriesSent, UdpResponses, UdpResponsesReceived",,,,Get-DnsServerStatistics | Select -ExpandProperty QueryStatistics,,,,,AD DNS Server Statistics (Query 1)
AD DNS Server Statistics (Query 2),Network,Invoke-Command -ScriptBlock { Get-DnsServerStatistics | Select -ExpandProperty Query2Statistics },,,,,,"PSComputerName, Notify, Standard, TKeyNego, TotalQueries, TypeA, TypeAll, TypeAxfr, TypeIxfr, TypeMx, TypeNs, TypeOther, TypePtr, TypeSoa, TypeSrv, Update",,,,Get-DnsServerStatistics | Select -ExpandProperty Query2Statistics,,,,,AD DNS Server Statistics (Query 2)
AD DNS Server Global Query Block List,Network,Invoke-Command -ScriptBlock { Get-DnsServerGlobalQueryBlockList },,,,,,"PSComputerName, Enabled, List",,,,Get-DnsServerGlobalQueryBlockList,,,,,AD DNS Server Global Query Block List
AD DNS Server Global Name Zone,Network,Invoke-Command -ScriptBlock { Get-DnsServerGlobalNameZone },,,,,,"PSComputerName, Enable, GlobalOverLocal, PreferAAAA, AlwaysQueryServer, EnableEDnsProbes, BlockUpdates, SendTimeout, ServerQueryInterval",,,,Get-DnsServerGlobalNameZone,,,,,AD DNS Server Global Name Zone
AD DNS Server Forwarder,Network,Invoke-Command -ScriptBlock { Get-DnsServerForwarder },,,,,,"PSComputerName, UseRootHint, Timeout, EnableReordering, IPAddress, ReorderedIPAddress",,,,Get-DnsServerForwarder,,,,,AD DNS Server Forwarder
AD DNS Server Diagnostics,Network,Invoke-Command -ScriptBlock { Get-DnsServerDiagnostics },,,,,,"PSComputerName, SaveLogsToPersistentStorage, Queries, Answers, Notifications, Update, QuestionTransactions, UnmatchedResponse, SendPackets, ReceivePackets, TcpPackets, UdpPackets, FullPackets, FilterIPAddressList, EventLogLevel, UseSystemEventLog, EnableLoggingToFile, EnableLogFileRollover, LogFilePath, MaxMBFileSize, WriteThrough, EnableLoggingForLocalLookupEvent, EnableLoggingForPluginDllEvent, EnableLoggingForRecursiveLookupEvent, EnableLoggingForRemoteServerEvent, EnableLoggingForServerStartStopEvent, EnableLoggingForTombstoneEvent, EnableLoggingForZoneDataWriteEvent, EnableLoggingForZoneLoadingEvent",,,,Get-DnsServerDiagnostics,,,,,AD DNS Server Diagnostics
AD DNS Server Scavenging,Network,Invoke-Command -ScriptBlock { Get-DnsServerScavenging },,,,,,"PSComputerName, NoRefreshInterval, RefreshInterval, ScavengingInterval, ScavengingState, LastScavengeTime",,,,Get-DnsServerScavenging,,,,,AD DNS Server Scavenging
AD DNS Server Settings,Network,Invoke-Command -ScriptBlock { Get-DnsServerSetting },,,,,,"PSComputerName, ComputerName, MajorVersion, MinorVersion, BuildNumber, IsReadOnlyDC, EnableDnsSec, EnableIPv6, ListeningIPAddress, AllIPAddress",,,,Get-DnsServerSetting,,,,,AD DNS Server Settings
AD DNS Server Recursion,Network,Invoke-Command -ScriptBlock { Get-DnsServerRecursion },,,,,,"PSComputerName, Enable, AdditionalTimeout, RetryInterval, Timeout, SecureResponse",,,,Get-DnsServerRecursion,,,,,AD DNS Server Recursion
AD DNS Server RootHints,Network,Invoke-Command -ScriptBlock { Get-DNSServerRootHint },,,,,,"PSComputerName, *",,,,Get-DNSServerRootHint,,,,,AD DNS Server RootHints
AD DNS Server Zone,Network,Invoke-Command -ScriptBlock { Get-DnsServerZone },,,,,,"PSComputerName, ZoneName, ZoneType, IsAutoCreated, IsDsIntegrated, IsReverseLookupZone, IsSigned",,,,Get-DnsServerZone,,,,,AD DNS Server Zone
AD DNS Server Zone Aging,Network,Invoke-Command -ScriptBlock { Get-DnsServer | Select -ExpandProperty ServerZoneAging },,,,,,"PSComputerName, ZoneName, AgingEnabled, AvailForScavengeTime, RefreshInterval, NoRefreshInterval, ScavengeServers",,,,Get-DnsServer | Select -ExpandProperty ServerZoneAging,,,,,AD DNS Server Zone Aging
AD Get All GPOs,"GPO, Group Policy",Invoke-Command -ScriptBlock { Get-GPO -All },,,,,,"PSComputerName, *",,,,Get-GPO -All,,,,Get all Group Policy Objects (GPO).,AD Get All GPOs
