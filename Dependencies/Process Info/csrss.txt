csrss.exe (Client/Server Run)   [CSRSS, WININIT]

Image Path:	%SystemRoot%\System32\csrss.exe

Parent Process:	Created by an instance of smss.exe that exits, so analysis tools usually do not provide the parent process name.

Child Processes:

Number of Instances:	Two or more

User Account:	Local System

Start Time:	Within second of boot time for the first 2 instances (for Session 0 and 1). Start times for additional instances occur as new sessions are created, although often only Sessions 0 and 1 are created.

Description:	The Client/Server Run-Time Subsystem is teh user-mode process for the Windows subsystem. Its duties include managing processes and threads, importing most of the DLLs that provide the Windows API, and facilitating shutdown of the GUI during system shutdown. An instance of csrss.exe will run for each session. Session 0 is for services and Session 1 for the local console session. Additional sessions are created through the use of Remote Desktop and/or Fast User Switching. Each new session resuls in a new instance of csrss.exe. Depending on the OS version, csrss.exe (prior to Win7/2008 R2) or its child process conhost.exe (Win7/2008 R2 and later) contain command history for instances of cmd.exe. Searching the address space for these processes is particularly useful when analyzing the memory for compromised hosts.
Windows subsystem process.
Base Priority of 13

Username: NT AUTHORITY\SYSTEM

Creates/Deletes processes and threads, Temp files, etc.
In XP its used to draw text based console windows. Under Windows 7, the conhost process now does that functionality. For example, cmd.exe
One csrss process per session
Its name is often used by malware to hide on systems (CSSRS.EXE, CSRSSS.EXE, etc.)
Runs within session 0
CSRSS is the Client/ Server runtime, a Windows management process
CSRSS is launched by an instance of SMSS which then exits, so the legitimate processes (one per session) won’t have any parent.
Otherwise CSRSS has all the usual system-type attributes: an image in %SystemRoot%\System32, running as SYSTEM, with a PID clustering around the other core system processes.
It’s another candidate for process name spoofing, so sort the Process list alphabetically again to look for anything similar.